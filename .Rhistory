df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
# df.horse$race_name <- as.character(df.horse$race_name)
df.horse$pos <- as.integer(as.character(df.horse$pos))
# Convert secs to numeric after handling non-numeric values
df.horse$secs <- as.numeric(as.character(df.horse$secs))
colSums(is.na(df.horse) | df.horse == "")
str(df.horse)
# Log-transforming 'dist_m', 'lbs', and 'secs'
df.horse$log_dist_m <- log(df.horse$dist_m)
df.horse$log_lbs <- log(df.horse$lbs)
df.horse$log_secs <- log(df.horse$secs)
plot(df.horse$log_dist_m)
# Sample 10% of the dataset for testing
df.horse_sample <- df.horse[sample(nrow(df.horse), 0.1 * nrow(df.horse)), ]
dim(df.horse_sample)
glm.horse_sample <- glm(won ~ type + log_dist_m + going + age + sex + log_lbs + log_secs,
data = df.horse_sample,
family = "binomial")
summary(glm.horse_sample)
# check unique values of this column
unique(df.horse$pos)
# Import the Data from CSV Files
df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# check unique values of this column
unique(df.horse$pos)
df.horse <- df.horse[!df.horse$pos %in% c("UR", "PU", "F", "DSQ", "RR", "BD"), ]
unique(df.horse$pos)
df.horse <- df.horse[!df.horse$pos %in% c("UR", "PU", "F", "DSQ", "RR", "BD", "RO", "SU", "REF"), ]
unique(df.horse$pos)
# check the same for secs
df.horse$secs_num <- as.numeric(df.horse$secs)
df.horse[is.na(as.integer(df.horse$secs_num)), ]$secs
# see rows where secs = "-"
df[df$secs=="-"]
# see rows where secs = "-"
df[df$secs=="-",]
# see rows where secs = "-"
df.horse[df.horse$secs=="-",]
# see rows where secs = "-"
df.horse[df.horse$secs=="-"]
# see rows where secs = "-"
df.horse[df.horse$secs=="-",]
df.horse <- df.horse[df.horse$secs != "-"), ]
df.horse <- df.horse[df.horse$secs != "-", ]
unique(df.horse$secs)
df.horse$pos <- as.integer(df.horse$pos)
df.horse$secs <- as.numeric(df.horse$secs)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# Convert 'pos' column to an ordered factor
df.horse$pos <- factor(df.horse$pos,
levels = c("1st", "2nd", "3rd", "4th", "5th"),
ordered = TRUE)
# Convert 'pos' column to an ordered factor
df.horse$pos <- factor(df.horse$pos,
levels = c1:18,
ordered = TRUE)
# Convert 'pos' column to an ordered factor
df.horse$pos <- factor(df.horse$pos,
levels = 1:18,
ordered = TRUE)
str(df.horse$pos)
summary(df.horse$pos)
# Import the Data from CSV Files
df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# Import the Data from CSV Files
df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# check which values of pos can't be converted to integers
unique(df.horse$pos)
df.horse <- df.horse[!df.horse$pos %in% c("UR", "PU", "F", "DSQ", "RR", "BD", "RO", "SU", "REF"), ]
unique(df.horse$pos)
# check the same for secs
df.horse$secs_num <- as.numeric(df.horse$secs)
df.horse[is.na(as.integer(df.horse$secs_num)), ]$secs
# see rows where secs = "-"
df.horse[df.horse$secs=="-",]
df.horse <- df.horse[df.horse$secs != "-", ]
df.horse$pos <- as.integer(df.horse$pos)
df.horse$secs <- as.numeric(df.horse$secs)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# remove helper variable, won't need it anymore
df.horse <- subset(df.horse, select=-c(hg,prize))
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# remove helper variable, won't need it anymore
df.horse <- subset(df.horse, select=-secs_num)
df.horse.columns
colnames(df.horse)
str(df.horse$pos)
summary(df.horse$pos)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# remove helper variable, won't need it anymore
df.horse <- subset(df.horse, select=-secs_num)
df.horse$lbs.head()
# Import the Data from CSV Files
df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# check which values of pos can't be converted to integers
unique(df.horse$pos)
df.horse <- df.horse[!df.horse$pos %in% c("UR", "PU", "F", "DSQ", "RR", "BD", "RO", "SU", "REF"), ]
unique(df.horse$pos)
# check the same for secs
df.horse$secs_num <- as.numeric(df.horse$secs)
df.horse[is.na(as.integer(df.horse$secs_num)), ]$secs
# see rows where secs = "-"
df.horse[df.horse$secs=="-",]
df.horse <- df.horse[df.horse$secs != "-", ]
df.horse$pos <- as.integer(df.horse$pos)
df.horse$secs <- as.numeric(df.horse$secs)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# remove helper variable, won't need it anymore
df.horse <- subset(df.horse, select=-secs_num)
# check if it worked
colnames(df.horse)
head(df.horse)
hist(df.horse$dist_m)
hist(df.horse$dist_m)
hist(df.horse$log_dist_m)
type(df.horse$log_dist_m)
class(df.horse$log_dist_m)
# Log-transforming 'dist_m', 'lbs', and 'secs'
df.horse$log_dist_m <- log(df.horse$dist_m)
df.horse$log_lbs <- log(df.horse$lbs)
df.horse$log_secs <- log(df.horse$secs)
class(df.horse$log_dist_m)
hist(df.horse$dist_m)
hist(df.horse$log_dist_m)
hist(df.horse$lbs)
hist(df.horse$log_lbs)
hist(df.horse$secs)
hist(df.horse$log_secs)
par(mfrow = c(3, 2))
hist(df.horse$dist_m)
hist(df.horse$log_dist_m)
hist(df.horse$lbs)
hist(df.horse$log_lbs)
hist(df.horse$secs)
hist(df.horse$log_secs)
hist(df.horse$dist_m)
# Import the Data from CSV Files
df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
str(df.horse)
head(df.horse)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
str(df.horse)
head(df.horse)
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# check which values of pos can't be converted to integers
unique(df.horse$pos)
df.horse <- df.horse[!df.horse$pos %in% c("UR", "PU", "F", "DSQ", "RR", "BD", "RO", "SU", "REF"), ]
unique(df.horse$pos)
# check the same for secs
df.horse$secs_num <- as.numeric(df.horse$secs)
df.horse[is.na(as.integer(df.horse$secs_num)), ]$secs
# see rows where secs = "-"
df.horse[df.horse$secs=="-",]
df.horse <- df.horse[df.horse$secs != "-", ]
df.horse$pos <- as.integer(df.horse$pos)
df.horse$secs <- as.numeric(df.horse$secs)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# Log-transforming 'dist_m', 'lbs', and 'secs'
df.horse$log_dist_m <- log(df.horse$dist_m)
df.horse$log_lbs <- log(df.horse$lbs)
df.horse$log_secs <- log(df.horse$secs)
par(mfrow = c(3, 2))
hist(df.horse$dist_m)
# Install the rsample package if needed
#install.packages("rsample")
# Load required libraries
library(rsample)
# Assume df.horse is your data frame, and you're stratifying by 'type'
set.seed(123)  # Set seed for reproducibility
# Create a 10% stratified sample based on the 'type' column
split <- initial_split(df.horse, prop = 0.1, strata = type)
# Get the training set (this will be your 10% stratified sample)
stratified_sample <- training(split)
# Check the distribution to ensure stratification worked
table(stratified_sample$type)  # This should be proportional to the original distribution
# View the sampled data
head(stratified_sample)
df.horse_sample <-stratified_sample
dim(df.horse_sample)
print("df.horse$type:")
summary(df.horse$type)
print("df.horse_sample$type:")
summary(df.horse_sample$type)
plot(log_dist_m ~ log_lbs, data = df.horse_sample,
main = "Log distance against log weight")
plot(log_dist_m ~ log_time, data = df.horse_sample,
main = "Log distance against sex")
plot(log_dist_m ~ log_secs, data = df.horse_sample,
main = "Log distance against sex")
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
legend(col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
legend(legend=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
legend(legend=c(0,1))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c("F","M"),
col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c(0,),
col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c(0,1),
col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
#legend("topleft",
#      pch=19,
#     legend=c(0,1),
#    col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
# col=won,
main = "Log distance against log time")
#legend("topleft",
#      pch=19,
#     legend=c(0,1),
#    col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
main = "Log distance against log time")
#legend("topleft",
#      pch=19,
#     legend=c(0,1),
#    col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
pch=19,
main = "Log distance against log time")
#legend("topleft",
#      pch=19,
#     legend=c(0,1),
#    col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
pch=19,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c(0,1),
col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=won,
pch=19,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c("lost","won"),
col=c("blue","red"))
plot(log_dist_m ~ log_secs, data = df.horse,
col=won,
pch=19,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c("lost","won"),
col=c("blue","red"))
plot(dist_m ~ secs, data = df.horse,
col=won,
pch=19,
main = "Log distance against log time")
legend("topleft",
pch=19,
legend=c("lost","won"),
col=c("blue","red"))
library(ggplot2)
qplot(y= log_dist_m,x=log_secs,
data=df.horse_sample,
facets= ~won)
plot(log_dist_m ~ log_secs, data = df.horse_sample,
col=sex,
pch=19,
main = "Log distance against log time")
plot(log_dist_m ~ won, data = df.horse_sample,
main = "Log distance against sex")
boxplot(log_dist_m ~ won, data = df.horse_sample,
main = "Log distance against sex")
boxplot(log_dist_m ~ won, data = df.horse_sample,
main = "Log distance against won")
boxplot(log_secs ~ won, data = df.horse_sample,
main = "Log time against won")
unique(df.horse$sex)
unique(df.horse$sex)
# Rename the original varialbe
df.horse$sex_6 <- df.horse$sex
#df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
colnames(df.horse)
# Rename the original varialbe
df.horse$sex_6 <- df.horse$sex
# Drop old sex column
df.horse <- subset(df.horse, select=sex)
#df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
colnames(df.horse)
# Rename the original varialbe
df.horse$sex_6 <- df.horse$sex
# Drop old sex column
df.horse <- subset(df.horse, select=-sex)
#df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
colnames(df.horse)
# Rename the original varialbe
df.horse$sex_6 <- df.horse$sex
# Drop old sex column
df.horse <- subset(df.horse, select=-sex)
df.horse$place <- ifelse(df.horse$pos == c(1,2,3), 1, 0)
# Import the Data from CSV Files
df1 <- read.csv("Lingfield_AW_2014_2024_flat.csv")
df2 <- read.csv("Lingfield_AW_2014_2024_jumps.csv")
df3 <- read.csv("Lingfield_turf_2014_2024_flat.csv")
df4 <- read.csv("Lingfield_turf_2014_2024_jumps.csv")
df.horse <- rbind(df1, df2, df3, df4)
str(df.horse)
head(df.horse)
df.horse <- subset(df.horse, select=c(date, race_name,type, class, dist_m, going, ran, pos, draw, horse, age, sex, lbs, hg, secs, jockey, trainer, prize))
str(df.horse)
head(df.horse)
df.horse$won <- ifelse(df.horse$pos == 1, 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","won")],50)
# => looks good
df.horse$place <- ifelse(df.horse$pos == c(1,2,3), 1, 0)
# Check the first few rows to ensure the new column has been added
head(df.horse[c("pos","place")],50)
# => looks good ???
colSums(is.na(df.horse) | df.horse == "")
# let's drop hg and prize because most of them are missing
# but let's keep draw because AFAIK it might influence outcome
# keep it in mind that it only exists for Flat course type
df.horse <- subset(df.horse, select=-c(hg,prize))
str(df.horse)
df.horse$date <- as.Date(as.character(df.horse$date), format = "%Y-%m-%d")
# check which values of pos can't be converted to integers
unique(df.horse$pos)
df.horse <- df.horse[!df.horse$pos %in% c("UR", "PU", "F", "DSQ", "RR", "BD", "RO", "SU", "REF"), ]
unique(df.horse$pos)
# check the same for secs
df.horse$secs_num <- as.numeric(df.horse$secs)
df.horse[is.na(as.integer(df.horse$secs_num)), ]$secs
# see rows where secs = "-"
df.horse[df.horse$secs=="-",]
df.horse <- df.horse[df.horse$secs != "-", ]
df.horse$pos <- as.integer(df.horse$pos)
df.horse$secs <- as.numeric(df.horse$secs)
# Convert all character columns to factors
df.horse[sapply(df.horse, is.character)] <- lapply(df.horse[sapply(df.horse, is.character)], as.factor)
str(df.horse)
# remove helper variable, won't need it anymore
df.horse <- subset(df.horse, select=-secs_num)
# check if it worked
colnames(df.horse)
unique(df.horse$sex)
# Rename the original varialbe
df.horse$sex_6 <- df.horse$sex
# Drop old sex column
df.horse <- subset(df.horse, select=-sex)
# Create binary sex variable
df.horse$sex <- ifelse(df.horse$sex_6 %in% c("G", "C", "H", "R"), "M", "F")
# Convert to factor
df.horse$sex <- as.factor(df.horse$sex)
# Log-transforming 'dist_m', 'lbs', and 'secs'
df.horse$log_dist_m <- log(df.horse$dist_m)
df.horse$log_lbs <- log(df.horse$lbs)
df.horse$log_secs <- log(df.horse$secs)
# Log-transforming 'dist_m', 'lbs', and 'secs'
df.horse$log_dist_m <- log(df.horse$dist_m)
df.horse$log_lbs <- log(df.horse$lbs)
df.horse$log_secs <- log(df.horse$secs)
df.horse$log_age <- log(df.horse$age)
par(mfrow = c(4, 2))
hist(df.horse$dist_m)
str(df.horse)
print(df['sex_6'].value_counts())
table(df.horse$sex_6)
df$sex_4 <- as.character(df$sex_6)  # Convert to character to modify levels
df.horse$sex_4 <- as.character(df.horse$sex_6)  # Convert to character to modify levels
df.horse$sex_4[df.horse$sex_4 %in% c("H", "M", "R")] <- "Other"  # Combine rare categories
df.horse$sex_4 <- as.factor(df.horse$sex_4)  # Convert back to factor
# Check the new distribution
table(df.horse$sex_4)
